## R√©gression lin√©aire

::: {.callout-note appearance="simple"}
Prompt : 

* Comment faire une r√©gression lin√©aire en R? 


:::

----

![ChatGPT](../img/ChatGPT.PNG)

La r√©gression lin√©aire en R peut √™tre effectu√©e de mani√®re simple √† l‚Äôaide de la fonction `lm()` (Linear Model). Voici les √©tapes g√©n√©rales pour r√©aliser une r√©gression lin√©aire en R :

---

### √âtape 1 : Charger les donn√©es
Vous pouvez utiliser un jeu de donn√©es int√©gr√© √† R ou importer vos propres donn√©es depuis un fichier.

```R
# Exemple avec un jeu de donn√©es int√©gr√©, mtcars
data(mtcars)

# Afficher les premi√®res lignes des donn√©es
head(mtcars)
```

---

### √âtape 2 : Ajuster le mod√®le de r√©gression lin√©aire
Utilisez la fonction `lm()` pour ajuster le mod√®le. Par exemple, si vous voulez mod√©liser la relation entre le poids de la voiture (`wt`) et sa consommation (`mpg`), utilisez :

```R
# Ajuster une r√©gression lin√©aire
modele <- lm(mpg ~ wt, data = mtcars)

# R√©sum√© du mod√®le
summary(modele)
```

---

### √âtape 3 : Interpr√©ter les r√©sultats
La sortie de `summary(modele)` inclut des informations importantes :
- **Coefficients** : Les estimations des coefficients de r√©gression.
- **p-value** : Pour tester la signification statistique des coefficients.
- **R-squared** : Pour √©valuer la qualit√© de l'ajustement.

---

### √âtape 4 : Visualiser le mod√®le
Vous pouvez visualiser les donn√©es et la ligne de r√©gression avec la fonction `plot()` ou en utilisant des librairies comme `ggplot2`.

```R
# Visualisation basique
plot(mtcars$wt, mtcars$mpg, main = "R√©gression lin√©aire",
     xlab = "Poids de la voiture", ylab = "Consommation (mpg)")
abline(modele, col = "red", lwd = 2)
```

Ou avec `ggplot2` :

```R
library(ggplot2)

ggplot(mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_smooth(method = "lm", col = "red") +
  labs(title = "R√©gression lin√©aire", x = "Poids de la voiture", y = "Consommation (mpg)")
```

---

### √âtape 5 : Diagnostiquer le mod√®le
Pour v√©rifier les hypoth√®ses du mod√®le (lin√©arit√©, normalit√© des r√©sidus, etc.), utilisez les graphiques de diagnostic int√©gr√©s.

```R
# Graphiques de diagnostic
par(mfrow = c(2, 2))  # Affiche 4 graphiques sur une m√™me page
plot(modele)
```

---

### √âtape 6 : Pr√©dictions
Pour effectuer des pr√©dictions √† partir du mod√®le ajust√© :

```R
# Nouvelles donn√©es
nouvelles_donnees <- data.frame(wt = c(2.5, 3.0, 3.5))

# Pr√©dictions
predictions <- predict(modele, newdata = nouvelles_donnees)
print(predictions)
```

---

Cette m√©thodologie couvre les bases de la r√©gression lin√©aire en R. Pour des analyses plus complexes, explorez les options suppl√©mentaires de `lm()` ou d'autres packages comme `caret` pour la mod√©lisation.

----

![Copilot](../img/copilot.PNG)

Pour effectuer une r√©gression lin√©aire en R, vous pouvez suivre ces √©tapes :

1. **Importer les donn√©es** :
   ```R
   data <- read.csv("votre_fichier.csv")
   ```

2. **Visualiser les donn√©es** :
   ```R
   plot(data$variable_ind√©pendante, data$variable_d√©pendante)
   ```

3. **Ajuster le mod√®le de r√©gression lin√©aire** :
   ```R
   model <- lm(variable_d√©pendante ~ variable_ind√©pendante, data = data)
   summary(model)
   ```

4. **Visualiser la ligne de r√©gression** :
   ```R
   plot(data$variable_ind√©pendante, data$variable_d√©pendante)
   abline(model, col = "red")
   ```

5. **√âvaluer les r√©sidus** :
   ```R
   plot(model$residuals)
   ```

Ces √©tapes vous permettent de r√©aliser une r√©gression lin√©aire simple et d'analyser les r√©sultats. Pour plus de d√©tails, vous pouvez consulter des tutoriels en ligne comme ceux de [DellaData](https://delladata.fr/la-regression-lineaire-simple-avec-le-logiciel-r/) ou des vid√©os explicatives sur YouTube[1](https://www.youtube.com/watch?v=B5s8LP7s2-Q)[2](https://www.youtube.com/watch?v=0DyW4WXdvsk).

Si vous avez des questions sp√©cifiques ou des donn√©es particuli√®res √† analyser, n'h√©sitez pas √† me le faire savoir ! üòä