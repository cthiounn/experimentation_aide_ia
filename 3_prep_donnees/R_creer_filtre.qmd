## Appliquer un filtre

::: {.callout-note appearance="simple"}
Prompt : 

* Comment faire un filtre en R ?


:::

----

## ChatGPT {style="background-color: #f0f8ff; padding: 20px;"}
![ChatGPT](../img/ChatGPT.PNG)

Pour cr√©er un filtre en R, cela d√©pend du type de donn√©es que vous souhaitez filtrer et de l'objectif du filtre. Voici les diff√©rentes fa√ßons de filtrer des donn√©es dans R, en fonction de diff√©rents cas :

### 1. Filtrer un `data.frame` avec la fonction `subset()`
Si vous avez un `data.frame` et souhaitez filtrer les lignes selon une condition sp√©cifique, vous pouvez utiliser la fonction `subset()`.

#### Exemple :
```r
# Cr√©er un exemple de data.frame
df <- data.frame(
  id = 1:5,
  age = c(23, 25, 28, 22, 30),
  sexe = c('Homme', 'Femme', 'Homme', 'Femme', 'Homme')
)

# Filtrer les lignes o√π l'√¢ge est sup√©rieur ou √©gal √† 25
df_filtr√© <- subset(df, age >= 25)

print(df_filtr√©)
```

### 2. Filtrer un `data.frame` avec `dplyr`
Le package `dplyr` de la suite `tidyverse` offre une syntaxe plus concise et expressive pour effectuer des filtres.

#### Exemple avec `dplyr` :
1. Installez et chargez le package `dplyr` si n√©cessaire :
```r
install.packages("dplyr")
library(dplyr)
```

2. Utilisez la fonction `filter()` pour appliquer des conditions de filtrage.

```r
# Cr√©er un exemple de data.frame
df <- data.frame(
  id = 1:5,
  age = c(23, 25, 28, 22, 30),
  sexe = c('Homme', 'Femme', 'Homme', 'Femme', 'Homme')
)

# Filtrer les lignes o√π l'√¢ge est sup√©rieur ou √©gal √† 25
df_filtr√© <- df %>%
  filter(age >= 25)

print(df_filtr√©)
```

### 3. Filtrer avec des conditions complexes
Vous pouvez aussi combiner plusieurs conditions de filtrage dans `subset()` ou `filter()`.

#### Exemple avec `dplyr` (conditions multiples) :
```r
df_filtr√© <- df %>%
  filter(age >= 25 & sexe == 'Homme')

print(df_filtr√©)
```

### 4. Filtrer un vecteur
Si vous avez un vecteur et souhaitez le filtrer, vous pouvez utiliser la syntaxe des indices logiques :

#### Exemple avec un vecteur :
```r
# Cr√©er un vecteur d'√¢ges
ages <- c(23, 25, 28, 22, 30)

# Filtrer les √¢ges sup√©rieurs ou √©gaux √† 25
ages_filtr√©s <- ages[ages >= 25]

print(ages_filtr√©s)
```

### Conclusion
- Pour des filtrages simples sur des `data.frame`, `subset()` est une solution rapide.
- Pour un filtrage plus puissant, flexible et facile √† combiner avec d'autres op√©rations, `dplyr::filter()` est id√©al.
- Si vous travaillez avec des vecteurs, vous pouvez utiliser l'indexation logique directement.

Le choix entre ces m√©thodes d√©pend de votre pr√©f√©rence personnelle ou du contexte dans lequel vous travaillez.

----

## Copilot {style="background-color: #faa555; padding: 20px;"}
![Copilot](../img/copilot.PNG)

Cr√©er un filtre en R est assez simple et peut √™tre fait de plusieurs mani√®res, selon ce que vous souhaitez filtrer. Voici un exemple de base pour filtrer un dataframe en utilisant le package `dplyr` :

1. **Installer et charger le package `dplyr`** :
    ```R
    install.packages("dplyr")
    library(dplyr)
    ```

2. **Cr√©er un dataframe d'exemple** :
    ```R
    data <- data.frame(
      id = 1:10,
      score = c(50, 60, 70, 80, 90, 100, 110, 120, 130, 140)
    )
    ```

3. **Filtrer les lignes o√π le score est sup√©rieur √† 100** :
    ```R
    filtered_data <- data %>%
      filter(score > 100)
    ```

4. **Afficher le r√©sultat** :
    ```R
    print(filtered_data)
    ```

Ce code va filtrer le dataframe `data` pour ne garder que les lignes o√π la colonne `score` est sup√©rieure √† 100. Vous pouvez adapter ce code pour filtrer selon d'autres crit√®res ou utiliser d'autres fonctions de `dplyr` pour des filtrages plus complexes.

Si vous avez des besoins sp√©cifiques ou des questions suppl√©mentaires, n'h√©sitez pas √† me le faire savoir ! üòä