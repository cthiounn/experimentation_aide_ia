## Importer un fichier CSV

::: {.callout-note appearance="simple"}
Prompt : 

* Comment importer un CSV en R? 


:::

----

## ChatGPT {style="background-color: #f0f8ff; padding: 20px;"}
![ChatGPT](../img/ChatGPT.PNG)

Pour importer un fichier CSV en **R**, vous pouvez utiliser plusieurs fonctions adapt√©es √† vos besoins et √† la structure du fichier. Voici les √©tapes g√©n√©rales pour importer un fichier CSV :

---

### 1. **Utiliser `read.csv` (base R)**

La fonction de base pour importer un CSV est **`read.csv`**, qui fait partie de R par d√©faut.

```R
# Exemple de code
data <- read.csv("chemin/vers/fichier.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE)

# Arguments importants :
# - "chemin/vers/fichier.csv" : chemin vers le fichier CSV.
# - header = TRUE : indique si la premi√®re ligne contient les noms des colonnes.
# - sep = "," : sp√©cifie que le s√©parateur des colonnes est une virgule.
# - stringsAsFactors = FALSE : √©vite de convertir les colonnes de texte en facteurs.
```

---

### 2. **Utiliser `read_csv` (package `readr`)**

Si vous utilisez le package **`readr`** (inclus dans le tidyverse), la fonction **`read_csv`** est plus rapide et offre des fonctionnalit√©s avanc√©es.

```R
# Installer le package si n√©cessaire
install.packages("readr")

# Charger le package
library(readr)

# Importer le CSV
data <- read_csv("chemin/vers/fichier.csv")

# Avantages :
# - Importation rapide pour les fichiers volumineux.
# - Les types de colonnes sont automatiquement d√©tect√©s.
```

---

### 3. **Utiliser `fread` (package `data.table`)**

Pour des performances encore plus rapides, notamment avec de grands fichiers, utilisez **`fread`** du package **`data.table`**.

```R
# Installer le package si n√©cessaire
install.packages("data.table")

# Charger le package
library(data.table)

# Importer le CSV
data <- fread("chemin/vers/fichier.csv")

# Avantages :
# - Extr√™mement rapide pour les fichiers de grande taille.
# - D√©tection automatique des s√©parateurs et types de donn√©es.
```

---

### 4. **Sp√©cificit√©s suppl√©mentaires**

#### a) **Changer le s√©parateur (si ce n'est pas une virgule)**
- Si votre fichier utilise un autre s√©parateur, comme un point-virgule (`;`), vous devez l'indiquer :
```R
data <- read.csv("fichier.csv", sep = ";")
data <- read_delim("fichier.csv", delim = ";")
```

#### b) **G√©rer les fichiers CSV encod√©s diff√©remment**
- Si votre fichier contient des caract√®res sp√©ciaux, v√©rifiez l'encodage :
```R
data <- read.csv("fichier.csv", fileEncoding = "UTF-8")
data <- read_csv("fichier.csv", locale = locale(encoding = "UTF-8"))
```

---

### 5. **V√©rifier l'importation**
Une fois le fichier import√©, inspectez les donn√©es pour vous assurer qu'elles sont correctement charg√©es :
```R
head(data)       # Aper√ßu des premi√®res lignes
str(data)        # Structure des donn√©es (types des colonnes)
summary(data)    # R√©sum√© statistique des donn√©es
```

Si vous rencontrez des erreurs, n'h√©sitez pas √† partager plus de d√©tails ! üòä

----

## Copilot {style="background-color: #faa555; padding: 20px;"}
![Copilot](../img/copilot.PNG)



Importer un fichier CSV en R est assez simple. Voici les √©tapes de base :

1. **Installer et charger le package n√©cessaire** (si ce n'est pas d√©j√† fait) :
   ```R
   install.packages("readr")
   library(readr)
   ```

2. **Utiliser la fonction `read_csv`** pour lire le fichier CSV :
   ```R
   data <- read_csv("chemin/vers/votre_fichier.csv")
   ```

3. **V√©rifier les premi√®res lignes du fichier import√©** pour s'assurer que tout est correct :
   ```R
   head(data)
   ```

Assurez-vous de remplacer `"chemin/vers/votre_fichier.csv"` par le chemin r√©el de votre fichier CSV. Si vous avez des questions suppl√©mentaires ou des probl√®mes sp√©cifiques, n'h√©sitez pas √† demander ! üòä